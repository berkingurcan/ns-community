---
alwaysApply: true
---
Of course. I have analyzed our past work and the project's current state. The application has undergone a significant architectural refactor, moving away from a Solana-based authentication model to a more streamlined system using Supabase's native Discord OAuth.

These updated development rules reflect this new reality, focusing on the current architecture, its patterns, and its security model.

***

# Development & Documentation Protocol: NSphere

**PRIMARY OBJECTIVE:** Your mission is to develop "NSphere," an exclusive, permission-based community platform. You must operate under the project's **"documentation-as-a-guide"** philosophy. The architectural documentation in the markdown files serves as the primary reference for the system's logic and structure. Your code should be a robust implementation of that documented architecture.

---

## 1. Project Architecture Overview

NSphere is a **full-stack Next.js application** using the App Router. Its architecture is built on three pillars:

*   **Next.js Frontend:** The core of the application, located in `src/`, handling UI, routing, and client-side logic.
*   **Supabase Backend:** Provides the database, user authentication (via Discord OAuth), authorization, and storage. All interactions are managed through a central client (`src/lib/supabaseClient.ts`).
*   **Discord Authentication:** Handles user login and identity via Supabase's built-in OAuth provider for Discord. Authorization is managed via a whitelist of Discord IDs in the `allowed_users` table.

---

## 2. The Developer's Map: Finding What You Need

Before starting any task, consult this map to locate the relevant code and read the required documentation. Understanding the designated "source of truth" for each domain is critical.

| Concern / Domain | Responsibility | Code Location(s) | Key Documentation |
|:--- |:--- |:--- |:--- |
| **Core App & Pages** | Routing, page structure, main layouts. | `src/app/` | [`technical_documentation.md`](./technical_documentation.md) |
| **UI Components** | Reusable UI elements (Buttons, Cards, Forms). | `src/components/ui/` | [`UI.md`](./UI.md) |
| **Authentication & Authorization** | Discord OAuth login, session management, and user authorization (whitelist check). | `src/context/AuthContext.tsx`<br>`src/hoc/withAuth.tsx` | [`technical_documentation.md`](./technical_documentation.md)<br>[`PROFILE_AND_ONBOARDING.md`](./PROFILE_AND_ONBOARDING.md) |
| **User Profiles & Onboarding** | Creating and managing user data after initial sign-up. | `src/app/onboarding/`<br>`src/app/profile/` | [`PROFILE_AND_ONBOARDING.md`](./PROFILE_AND_ONBOARDING.md) |
| **Project Management** | All CRUD (Create, Read, Update, Delete) operations for projects. | `src/lib/projects.ts`<br>`src/app/projects/`<br>`src/components/ui/ProjectForm.tsx` | [`PROJECTS.md`](./PROJECTS.md)<br>[`DATABASE.md`](./DATABASE.md) |
| **Database & Data Models** | Database schema, table structures, and TypeScript types. | `src/lib/supabaseClient.ts`<br>`src/types/` | [`DATABASE.md`](./DATABASE.md) |

---

## 3. The Development Workflow: A Path to Success

Every change must follow this sequence to ensure quality and consistency.

### Phase 1: Analysis & Planning ("Think Before You Code")
1.  **Clarify the Goal:** Fully understand the user story or bug report.
2.  **Consult the Map & Read:** Use the "Developer's Map" to locate and read all relevant `.md` documentation.
3.  **Review the Code:** Examine the current implementation in the relevant directories.
4.  **Identify Discrepancies & ASK:** If you find any conflicts between the documentation and the code, **STOP** and report the discrepancy. Do not proceed with assumptions.

### Phase 2: Implementation ("Execute with Precision")
1.  **Implement the Logic:** Write clean, readable code that reflects the documented architecture.
2.  **Centralize Data Logic:**
    *   All database operations for **projects** **MUST** go through the `ProjectService` in `src/lib/projects.ts`.
    *   All state related to the current user's **authentication status, profile, and authorization** **MUST** be accessed from `AuthContext`.
3.  **Secure the Application:**
    *   Routes requiring a logged-in and authorized user **MUST** be wrapped with the `withAuth` HOC.
    *   Never log sensitive data like session tokens to the console in production code.

### Phase 3: Documentation ("Maintain the Source of Truth")
A task is not "done" until the documentation reflects the new state of the code. If your code changes the architecture, data flow, or business rules, you **MUST** update the corresponding `.md` file(s).

### Phase 4: Verification & Submission ("Present Your Work")
1.  **Self-Review:** Ensure your changes meet all requirements and that documentation is updated.
2.  **Submit the Pull Request:** Provide a clear description and reference the relevant issue.

---

## 4. Critical Technical Context & "Gotchas"

This section contains crucial, project-specific information.

### 4.1. Authentication & Authorization Flow
The authentication and authorization process is a clear, multi-step flow:
1.  **Discord Login:** The user clicks "Login with Discord," which triggers Supabase's `signInWithOAuth` method.
2.  **Session & Authorization Check:** `AuthContext` listens for authentication state changes. Upon successful login, it fetches the user's session.
3.  **Whitelist Verification:** `AuthContext` then queries the `allowed_users` table in Supabase, using the user's Discord provider ID to check if they are authorized.
4.  **State Propagation:** The `isAllowed` status is stored in the `AuthContext` and made available to the entire application. Components like the `Navigation` and HOCs like `withAuth` use this state to control UI and access.

### 4.2. Onboarding is Not Optional
*   **Mandatory Profile:** After a user authenticates and is authorized (`isAllowed === true`), the `AuthContext` checks for a profile in the `user_profiles` table.
*   **Forced Redirection:** If no profile exists, the `withAuth` HOC will automatically and immediately redirect the user to the `/onboarding` page. You cannot access protected pages like `/profile` or `/projects` with a new account until the onboarding form is completed.

### 4.3. Supabase Interaction Patterns
*   **No Raw Database Access from Frontend:** All frontend components should treat `ProjectService` and `AuthContext` as their API for backend data. This encapsulation must be respected.
*   **Fixed Storage Policies:** The policies for Supabase Storage are defined in `fixed-storage-policies.sql`. Be aware of these rules when working with file uploads (`ImageUpload.tsx`).

---

## 5. The Golden Rules (Non-Negotiable)

1.  **The Docs are the Guide.** If code and docs disagree, investigate why. Fix the code to match the docs, or get approval to update the docs first.
2.  **Centralize, Don't Scatter.** Use the established services (`ProjectService`) and contexts (`AuthContext`).
3.  **Respect the Authorization Gate.** The entire user experience is built for authenticated and authorized members.
4.  **Documentation is Part of "Done."** An undocumented change is an incomplete change.
